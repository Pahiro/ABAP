<?xml version="1.0" encoding="utf-8"?>
<nugget name="TRNSPRT_DEP">
 <ACID NAME="ZATDT" LANGU="E" DESCRIPT="ATDT"/>
 <TRAN TCODE="ZATDT" DYPNO="0000" CINFO="08">
  <tstct SPRSL="E" TCODE="ZATDT" TTEXT="Another Transport Dependency Tool"/>
  <tstcc TCODE="ZATDT" S_WEBGUI="1" S_WIN32="X" S_PLATIN="X"/>
  <tstcp TCODE="ZATDT" PARAM="\CLASS=ZCL_BC_ATDT\METHOD=_RUN"/>
  <rsstcd CLASSNAME="ZCL_BC_ATDT" METHOD="_RUN" DEVCLASS="$TMP"/>
 </TRAN>
 <CLAS CLSNAME="ZCL_BC_ATDT" VERSION="1" LANGU="E" DESCRIPT="Another Transport Dependency Tool (Beta)" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <types CLSNAME="ZCL_BC_ATDT" CMPNAME="GTY_LEVEL_S" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="4" SRCROW1="10 " SRCCOLUMN1="4 " SRCROW2="13 " SRCCOLUMN2="27 " TYPESRC_LENG="0 " TYPESRC="begin of gty_level_s.
    types trkorr type trkorr.
    types level type i.
    types end of gty_level_s
"/>
  <types CLSNAME="ZCL_BC_ATDT" CMPNAME="GTY_LEVEL_T" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="4" SRCROW1="15 " SRCCOLUMN1="4 " SRCROW2="15 " SRCCOLUMN2="49 " TYPESRC_LENG="0 " TYPESRC="gty_level_t type standard table of gty_level_s
"/>
  <types CLSNAME="ZCL_BC_ATDT" CMPNAME="GTY_TADIR_KEY_S" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="4" SRCROW1="17 " SRCCOLUMN1="4 " SRCROW2="22 " SRCCOLUMN2="31 " TYPESRC_LENG="0 " TYPESRC="begin of gty_tadir_key_s .
    types pgmid type  pgmid.
    types object type	trobjtype.
    types obj_name type	trobj_name.
    types level type numc2.
    types end of gty_tadir_key_s
"/>
  <types CLSNAME="ZCL_BC_ATDT" CMPNAME="GTY_TADIR_KEY_T" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " TYPTYPE="4" SRCROW1="24 " SRCCOLUMN1="4 " SRCROW2="24 " SRCCOLUMN2="57 " TYPESRC_LENG="0 " TYPESRC="gty_tadir_key_t type standard table of gty_tadir_key_s
"/>
  <types CLSNAME="ZCL_BC_ATDT" CMPNAME="GTY_OPTIONS_S" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " TYPTYPE="4" SRCROW1="26 " SRCCOLUMN1="4 " SRCROW2="31 " SRCCOLUMN2="29 " TYPESRC_LENG="0 " TYPESRC="begin of gty_options_s.
    types dev type mandt.
    types qas type mandt.
    types prd type mandt.
    types xignore_done type xfeld.
    types end of gty_options_s
"/>
  <types CLSNAME="ZCL_BC_ATDT" CMPNAME="GTY_LOG_S" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " TYPTYPE="4" SRCROW1="33 " SRCCOLUMN1="4 " SRCROW2="36 " SRCCOLUMN2="25 " TYPESRC_LENG="0 " TYPESRC="begin of gty_log_s.
    types trkorr type trkorr.
    types views type scts_log_overviews.
    types end of gty_log_s
"/>
  <types CLSNAME="ZCL_BC_ATDT" CMPNAME="GTY_LOG_T" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="7 " TYPTYPE="4" SRCROW1="38 " SRCCOLUMN1="4 " SRCROW2="38 " SRCCOLUMN2="45 " TYPESRC_LENG="0 " TYPESRC="gty_log_t type standard table of gty_log_s
"/>
  <types CLSNAME="ZCL_BC_ATDT" CMPNAME="GTY_STATUS_S" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="8 " TYPTYPE="4" SRCROW1="40 " SRCCOLUMN1="4 " SRCROW2="61 " SRCCOLUMN2="28 " TYPESRC_LENG="0 " TYPESRC="begin of gty_status_s.
    types trkorr type trkorr.
    types as4date type as4date.
    types as4time type as4time.
    types as4user type tr_as4user.
    types as4text type e07t-as4text.
    types xdone type xfeld.
    types xnorl type xfeld.
    types xnovw type xfeld.
    types seqdt type datum.
    types seqtm type uzeit.
    types rcdev type trretcode.
    types rcqas type trretcode.
    types rcprd type trretcode.
    types icdev type icon_d.
    types icqas type icon_d.
    types icprd type icon_d.
    types indev type icon_d.
    types inqas type icon_d.
    types inprd type icon_d.
    types level type i.
    types end of gty_status_s
"/>
  <types CLSNAME="ZCL_BC_ATDT" CMPNAME="GTY_STATUS_T" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="9 " TYPTYPE="4" SRCROW1="63 " SRCCOLUMN1="4 " SRCROW2="63 " SRCCOLUMN2="51 " TYPESRC_LENG="0 " TYPESRC="gty_status_t type standard table of gty_status_s
"/>
  <types CLSNAME="ZCL_BC_ATDT" CMPNAME="GTY_LOCK_S" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="10 " TYPTYPE="4" SRCROW1="65 " SRCCOLUMN1="4 " SRCROW2="77 " SRCCOLUMN2="26 " TYPESRC_LENG="0 " TYPESRC="begin of gty_lock_s .
    types pgmid                    type  e071-pgmid.
    types object                   type  e071-object.
    types obj_name                 type  e071-obj_name.
    types lockable_object          type trpari-s_checked.
    types locked                   type trpari-s_checked.
    types lock_order               type e070-trkorr.
    types lock_order_user          type e070-as4user.
    types lock_task                type e070-trkorr.
    types lock_task_user           type e070-as4user.
    types object_editable          type trpari-s_checked.
    types possible_user_edit_task  type e070-trkorr.
    types end of gty_lock_s
"/>
  <types CLSNAME="ZCL_BC_ATDT" CMPNAME="GTY_LOCK_T" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="11 " TYPTYPE="4" SRCROW1="79 " SRCCOLUMN1="4 " SRCROW2="79 " SRCCOLUMN2="47 " TYPESRC_LENG="0 " TYPESRC="gty_lock_t type standard table of gty_lock_s
"/>
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <textPool>
   <language SPRAS="E">
    <textElement ID="I" KEY="I01" ENTRY="Deep Dependency Check" LENGTH="21 "/>
    <textElement ID="I" KEY="T01" ENTRY="ATDT (Beta) : Transport Request Selection" LENGTH="72 "/>
    <textElement ID="I" KEY="T02" ENTRY="ATDT (Beta) : Results" LENGTH="72 "/>
   </language>
  </textPool>
  <typeUsage CLSNAME="ZCL_BC_ATDT" TYPEGROUP="ABAP" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <typeUsage CLSNAME="ZCL_BC_ATDT" TYPEGROUP="TRSEL" VERSION="1" TPUTYPE="0" EXPLICIT="X" IMPLICIT="X"/>
  <typeUsage CLSNAME="ZCL_BC_ATDT" TYPEGROUP="TRWBO" VERSION="1" TPUTYPE="0" IMPLICIT="X"/>
  <forwardDeclaration>ABAP</forwardDeclaration>
  <forwardDeclaration>TRSEL</forwardDeclaration>
  <forwardDeclaration>TRWBO</forwardDeclaration>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_ALLSTAT" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="15 " ATTDECLTYP="2" ATTVALUE="&apos;RNODL&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRPARI-W_LONGSTAT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_ALLTYPE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="45 " ATTDECLTYP="2" ATTVALUE="&apos;CDEFGKMOPQRSTWXL&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRPARI-W_LONGSTAT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_CAT_APPL" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="47 " ATTDECLTYP="2" ATTVALUE="&apos;APPL&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRCATEG" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_CAT_CUST" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="48 " ATTDECLTYP="2" ATTVALUE="&apos;CUST&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRCATEG" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_CAT_EU" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="46 " ATTDECLTYP="2" ATTVALUE="&apos;SYST&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRCATEG" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_CAT_SYS_CUST" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="49 " ATTDECLTYP="2" ATTVALUE="&apos;CUSY&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRCATEG" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_DEVC_CUSTOMER" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="57 " ATTDECLTYP="2" ATTVALUE="&apos;Z&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="KO015-DEVC_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_DEVC_INVALID" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="62 " ATTDECLTYP="2" ATTVALUE="&apos;X&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="KO015-DEVC_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_DEVC_LOCAL" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="53 " ATTDECLTYP="2" ATTVALUE="&apos;$&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="KO015-DEVC_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_DEVC_PARTNER" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="58 " ATTDECLTYP="2" ATTVALUE="&apos;J&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="KO015-DEVC_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_DEVC_PREFIXNS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="59 " ATTDECLTYP="2" ATTVALUE="&apos;N&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="KO015-DEVC_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_DEVC_PRIVATE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="54 " ATTDECLTYP="2" ATTVALUE="&apos;T&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="KO015-DEVC_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_DEVC_SAPAPPL" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="56 " ATTDECLTYP="2" ATTVALUE="&apos;A&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="KO015-DEVC_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_DEVC_SAPBAS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="55 " ATTDECLTYP="2" ATTVALUE="&apos;S&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="KO015-DEVC_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_DEVC_TESTPREFIXNS" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="60 " ATTDECLTYP="2" ATTVALUE="&apos;M&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="KO015-DEVC_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_DEVC_UNDEF" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="61 " ATTDECLTYP="2" ATTVALUE="&apos;U&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="KO015-DEVC_TYPE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_FILE_TYPE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="44 " ATTDECLTYP="2" ATTVALUE="&apos;FUDP&apos;" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="68 " SRCCOLUMN1="4 " SRCROW2="68 " SRCCOLUMN2="17 " TYPESRC_LENG="16 " TYPESRC="c_file_type(4)
"/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_GNS_ANY_PARTNR" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="66 " ATTDECLTYP="2" ATTVALUE="&apos;/0SJ*/&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="NAMESPACE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_GNS_CUST" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="63 " ATTDECLTYP="2" ATTVALUE="&apos;/0CUST/&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="NAMESPACE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_GNS_NO_DIFF" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="68 " ATTDECLTYP="2" ATTVALUE="&apos;/0*/&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="NAMESPACE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_GNS_NO_SPECIFIC" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="69 " ATTDECLTYP="2" ATTVALUE="&apos;/*/&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="NAMESPACE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_GNS_SAP_ALL" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="64 " ATTDECLTYP="2" ATTVALUE="&apos;/0SAP/&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="NAMESPACE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_GNS_SAP_N_PARTNR" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="67 " ATTDECLTYP="2" ATTVALUE="&apos;/0S*/&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="NAMESPACE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_GNS_SPEC_PARTNR" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="65 " ATTDECLTYP="2" ATTVALUE="&apos;/0SJnx/&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="NAMESPACE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_HANDLE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="74 " ATTDECLTYP="2" ATTVALUE="&apos;MAIN&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_KORRTYPE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="36 " ATTDECLTYP="2" ATTVALUE="&apos;QRS&apos;" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="52 " SRCCOLUMN1="4 " SRCROW2="52 " SRCCOLUMN2="16 " TYPESRC_LENG="15 " TYPESRC="c_korrtype(3)
"/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_LOCAL_TARGET" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="51 " ATTDECLTYP="2" ATTVALUE="&apos;LOCAL&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="E070-TARSYSTEM" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_LOCKSET" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="12 " ATTDECLTYP="2" ATTVALUE="&apos;L&apos;" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="21 " SRCCOLUMN1="4 " SRCROW2="21 " SRCCOLUMN2="15 " TYPESRC_LENG="14 " TYPESRC="c_lockset(1)
"/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_NOTREL" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="11 " ATTDECLTYP="2" ATTVALUE="&apos;DL&apos;" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="19 " SRCCOLUMN1="4 " SRCROW2="19 " SRCCOLUMN2="14 " TYPESRC_LENG="13 " TYPESRC="c_notrel(2)
"/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_OPNSET" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="10 " ATTDECLTYP="2" ATTVALUE="&apos;NO&apos;" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="17 " SRCCOLUMN1="4 " SRCROW2="17 " SRCCOLUMN2="14 " TYPESRC_LENG="13 " TYPESRC="c_opnset(2)
"/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_ORDERTYPE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="42 " ATTDECLTYP="2" ATTVALUE="&apos;CDEKMOPTW&apos;" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="64 " SRCCOLUMN1="4 " SRCROW2="64 " SRCCOLUMN2="17 " TYPESRC_LENG="16 " TYPESRC="c_ordertype(9)
"/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_PROJECT_TYPE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="43 " ATTDECLTYP="2" ATTVALUE="&apos;KW&apos;" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="66 " SRCCOLUMN1="4 " SRCROW2="66 " SRCCOLUMN2="20 " TYPESRC_LENG="19 " TYPESRC="c_project_type(2)
"/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_PROTECTED" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="14 " ATTDECLTYP="2" ATTVALUE="&apos;L&apos;" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="25 " SRCCOLUMN1="4 " SRCROW2="25 " SRCCOLUMN2="17 " TYPESRC_LENG="16 " TYPESRC="c_protected(1)
"/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_PROTECT_SET" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="13 " ATTDECLTYP="2" ATTVALUE="&apos;L&apos;" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="23 " SRCCOLUMN1="4 " SRCROW2="23 " SRCCOLUMN2="19 " TYPESRC_LENG="18 " TYPESRC="c_protect_set(1)
"/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_RELSET" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="9 " ATTDECLTYP="2" ATTVALUE="&apos;RNO&apos;" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="15 " SRCCOLUMN1="4 " SRCROW2="15 " SRCCOLUMN2="14 " TYPESRC_LENG="13 " TYPESRC="c_relset(3)
"/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_REPAIRED" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="50 " ATTDECLTYP="2" ATTVALUE="&apos;R&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="C" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_SAVED_HEADER" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="52 " ATTDECLTYP="2" ATTVALUE="&apos;SAVE&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TADIR-OBJECT" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TASKTYPE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="37 " ATTDECLTYP="2" ATTVALUE="&apos;QRSX&apos;" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="54 " SRCCOLUMN1="4 " SRCROW2="54 " SRCCOLUMN2="16 " TYPESRC_LENG="15 " TYPESRC="c_tasktype(4)
"/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TCCOP" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="22 " ATTDECLTYP="2" ATTVALUE="&apos;M&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRFUNCTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TCHO" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="18 " ATTDECLTYP="2" ATTVALUE="&apos;C&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRFUNCTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TCOL" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="23 " ATTDECLTYP="2" ATTVALUE="&apos;S&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRFUNCTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TCOM" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="27 " ATTDECLTYP="2" ATTVALUE="&apos;F&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRFUNCTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TCOR" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="17 " ATTDECLTYP="2" ATTVALUE="&apos;W&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRFUNCTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TCUST" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="29 " ATTDECLTYP="2" ATTVALUE="&apos;U&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRFUNCTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TCUT" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="26 " ATTDECLTYP="2" ATTVALUE="&apos;Q&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRFUNCTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TDEL" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="31 " ATTDECLTYP="2" ATTVALUE="&apos;L&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRFUNCTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TERROR" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="34 " ATTDECLTYP="2" ATTVALUE="&apos;Z&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRFUNCTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TMVD" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="20 " ATTDECLTYP="2" ATTVALUE="&apos;E&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRFUNCTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TMVO" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="19 " ATTDECLTYP="2" ATTVALUE="&apos;O&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRFUNCTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TPATCH" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="30 " ATTDECLTYP="2" ATTVALUE="&apos;D&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRFUNCTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TPROJ" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="32 " ATTDECLTYP="2" ATTVALUE="&apos;G&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRFUNCTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TPUT" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="28 " ATTDECLTYP="2" ATTVALUE="&apos;P&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRFUNCTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TRANSPORT_TYPE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="39 " ATTDECLTYP="2" ATTVALUE="&apos;CEKMOTW&apos;" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="58 " SRCCOLUMN1="4 " SRCROW2="58 " SRCCOLUMN2="22 " TYPESRC_LENG="21 " TYPESRC="c_transport_type(7)
"/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TRANSP_TYPE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="40 " ATTDECLTYP="2" ATTVALUE="&apos;CEKMOTW&apos;" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="60 " SRCCOLUMN1="4 " SRCROW2="60 " SRCCOLUMN2="19 " TYPESRC_LENG="18 " TYPESRC="c_transp_type(7)
"/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TRCO" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="16 " ATTDECLTYP="2" ATTVALUE="&apos;K&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRFUNCTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TRELD" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="7 " ATTDECLTYP="2" ATTVALUE="&apos;D&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRSTATUS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TRELL" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="8 " ATTDECLTYP="2" ATTVALUE="&apos;L&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRSTATUS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TRELN" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="5 " ATTDECLTYP="2" ATTVALUE="&apos;N&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRSTATUS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TRELO" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="6 " ATTDECLTYP="2" ATTVALUE="&apos;O&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRSTATUS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TRELR" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;R&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRSTATUS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TREP" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="24 " ATTDECLTYP="2" ATTVALUE="&apos;R&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRFUNCTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TR_WITH_LOG" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="41 " ATTDECLTYP="2" ATTVALUE="&apos;CDEKMOPTW&apos;" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="62 " SRCCOLUMN1="4 " SRCROW2="62 " SRCCOLUMN2="19 " TYPESRC_LENG="18 " TYPESRC="c_tr_with_log(9)
"/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TTRA" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="21 " ATTDECLTYP="2" ATTVALUE="&apos;T&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRFUNCTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TUCO" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="25 " ATTDECLTYP="2" ATTVALUE="&apos;X&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRFUNCTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TUNSAT" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="35 " ATTDECLTYP="2" ATTVALUE="&apos;z&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRFUNCTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_TVIRTUAL" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="33 " ATTDECLTYP="2" ATTVALUE="&apos;f&apos;" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRFUNCTION" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="C_WBTASKTYPE" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="38 " ATTDECLTYP="2" ATTVALUE="&apos;RSX&apos;" ATTEXPVIRT="0" TYPTYPE="4" SRCROW1="56 " SRCCOLUMN1="4 " SRCROW2="56 " SRCCOLUMN2="18 " TYPESRC_LENG="17 " TYPESRC="c_wbtasktype(3)
"/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="GO_ALV" VERSION="1" LANGU="E" DESCRIPT="Basis Class for Simple Tables" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_SALV_TABLE" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="GS_ALV_KEY" VERSION="1" LANGU="E" DESCRIPT="Layout Key" EXPOSURE="2" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SALV_S_LAYOUT_KEY" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="GS_OPTIONS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="GTY_OPTIONS_S" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="GT_COMPONENTS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="16 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="GTY_TADIR_KEY_T" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="GT_DISCARDED" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="17 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="GTY_TADIR_KEY_T" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="GT_ENTRIES" VERSION="1" LANGU="E" DESCRIPT="Objects" EXPOSURE="2" STATE="1" EDITORDER="6 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TR_OBJECTS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="GT_ENV" VERSION="1" LANGU="E" DESCRIPT="Repository Info System: Get Environment Results Table" EXPOSURE="2" STATE="1" EDITORDER="7 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SENVI_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="GT_LEVEL" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="GTY_LEVEL_T" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="GT_LOCK" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="15 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="GTY_LOCK_T" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="GT_LOG" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="8 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="GTY_LOG_T" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="GT_OBJKEYS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="9 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="GTY_TADIR_KEY_T" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="GT_REQUEST_PRIMARY" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="10 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRWBO_REQUEST_HEADERS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="GT_REQUEST_SECONDARY" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="14 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TRWBO_REQUEST_HEADERS" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="GT_SHOW" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="12 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="GTY_STATUS_T" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="GT_STATUS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="11 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="GTY_STATUS_T" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="GT_VERSION" VERSION="1" LANGU="E" DESCRIPT="Table of Type VRSD" EXPOSURE="2" STATE="1" EDITORDER="13 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="VRSD_TAB" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="O_CONTAINER" VERSION="1" LANGU="E" DESCRIPT="Container for Custom Controls in the Screen Area" EXPOSURE="0" STATE="1" EDITORDER="73 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="3" TYPE="CL_GUI_CUSTOM_CONTAINER" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="V_BASIC" VERSION="1" LANGU="E" DESCRIPT="Checkbox" EXPOSURE="1" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="XFELD" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="V_CONTAINER" VERSION="1" LANGU="E" DESCRIPT="Container Name" EXPOSURE="0" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="STRING" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="V_DYNNR" VERSION="1" LANGU="E" DESCRIPT="Current Screen Number" EXPOSURE="0" STATE="1" EDITORDER="2 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SYDYNNR" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="V_INIT" VERSION="1" LANGU="E" DESCRIPT="Checkbox" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="XFELD" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="V_LEVEL" VERSION="1" LANGU="E" DESCRIPT="Natural Number" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="INT4" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="V_REPID" VERSION="1" LANGU="E" DESCRIPT="ABAP Program: Current Main Program" EXPOSURE="0" STATE="1" EDITORDER="3 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="SYREPID" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="V_TMBEG" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="70 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TIMESTAMPL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="V_TMDUR" VERSION="1" LANGU="E" DESCRIPT="UTC Time Stamp in Long Form (YYYYMMDDhhmmssmmmuuun)" EXPOSURE="0" STATE="1" EDITORDER="72 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TIMESTAMPL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <attribute CLSNAME="ZCL_BC_ATDT" CMPNAME="V_TMEND" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="71 " ATTDECLTYP="0" ATTEXPVIRT="0" TYPTYPE="1" TYPE="TIMESTAMPL" SRCROW1="0 " SRCCOLUMN1="0 " SRCROW2="0 " SRCCOLUMN2="0 " TYPESRC_LENG="0 "/>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="COLLECT_COMPONENTS" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="COLLECT_COMPONENTS" SCONAME="IV_PGMID" VERSION="1" LANGU="E" DESCRIPT="Program ID in Requests and Tasks" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="COLLECT_COMPONENTS" SCONAME="IV_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="COLLECT_COMPONENTS" SCONAME="IV_OBJ_NAME" VERSION="1" LANGU="E" DESCRIPT="Object Name in Object List" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="COLLECT_COMPONENTS" SCONAME="CT_COMPONENTS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="GTY_TADIR_KEY_T"/>
   <source>method collect_components.

    data ls_objkey type ref to gty_tadir_key_s.
    data lt_dd03l type standard table of dd03l.
    data ls_dd03l type ref to dd03l.
    data lv_tabname type tabname.

    if iv_pgmid is initial
    or iv_object is initial
    or iv_obj_name is initial.
      return.
    endif.

*   add include structures
    if  iv_pgmid  = &apos;R3TR&apos;
    and iv_object = &apos;TABL&apos;.
      select * from dd03l into table lt_dd03l[]
        where tabname = iv_obj_name
          and comptype = &apos;S&apos;.
      loop at lt_dd03l[] reference into ls_dd03l.

        if ls_dd03l-&gt;precfield is not initial.
          lv_tabname = ls_dd03l-&gt;precfield.
        elseif ls_dd03l-&gt;rollname is not initial.
          lv_tabname = ls_dd03l-&gt;rollname.
        else.
          continue.
        endif.

        read table ct_components[] transporting no fields with key
          pgmid    = iv_pgmid
          object   = iv_object
          obj_name = lv_tabname.
        check not sy-subrc is initial.

        append initial line to ct_components[] reference into ls_objkey.
        ls_objkey-&gt;pgmid    = iv_pgmid.
        ls_objkey-&gt;object   = iv_object.
        ls_objkey-&gt;obj_name = lv_tabname.
      endloop.
    endif.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="CONSTRUCTOR" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="17 " DISPID="0 " MTDTYPE="2" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="CONSTRUCTOR" SCONAME="IV_DEV" VERSION="1" LANGU="E" DESCRIPT="Client" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MANDT" PARVALUE="&apos;GTD&apos;"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="CONSTRUCTOR" SCONAME="IV_QAS" VERSION="1" LANGU="E" DESCRIPT="Client" CMPTYPE="1" MTDTYPE="2" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MANDT" PARVALUE="&apos;GTQ&apos;"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="CONSTRUCTOR" SCONAME="IV_PRD" VERSION="1" LANGU="E" DESCRIPT="Client" CMPTYPE="1" MTDTYPE="2" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="MANDT" PARVALUE="&apos;GTP&apos;"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="CONSTRUCTOR" SCONAME="IV_XIGNORE_DONE" VERSION="1" LANGU="E" DESCRIPT="Ignore transports already imported into PRD" CMPTYPE="1" MTDTYPE="2" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XFELD" PARVALUE="ABAP_TRUE"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="CONSTRUCTOR" SCONAME="IV_REPID" VERSION="1" LANGU="E" DESCRIPT="ABAP Program: Current Main Program" CMPTYPE="1" MTDTYPE="2" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYREPID" PARVALUE="SY-REPID"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="CONSTRUCTOR" SCONAME="IV_DYNNR" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYDYNNR" PARVALUE="SY-DYNNR"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="CONSTRUCTOR" SCONAME="IV_CONTAINER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="2" EDITORDER="7 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PARVALUE="&apos;CONTAINER&apos;"/>
   <source>method constructor.

    gs_options-dev = iv_dev.
    gs_options-qas = iv_qas.
    gs_options-prd = iv_prd.
    gs_options-xignore_done = iv_xignore_done.

    gs_alv_key-report = v_repid = iv_repid.
    v_dynnr = iv_dynnr.
    v_container = iv_container.
    gs_alv_key-handle = c_handle.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="DISCARD_OBJECT" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="DISCARD_OBJECT" SCONAME="IV_PGMID" VERSION="1" LANGU="E" DESCRIPT="Program ID in Requests and Tasks" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="DISCARD_OBJECT" SCONAME="IV_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="DISCARD_OBJECT" SCONAME="IV_OBJ_NAME" VERSION="1" LANGU="E" DESCRIPT="Object Name in Object List" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <source>method discard_object.

    data ls_objkey type ref to gty_tadir_key_s.

    read table gt_discarded[] transporting no fields binary search with key
      pgmid    = iv_pgmid
      object   = iv_object
      obj_name = iv_obj_name.
    if sy-subrc is initial.
      return.
    endif.

    insert initial line into gt_discarded[] index sy-tabix reference into ls_objkey.
    ls_objkey-&gt;pgmid    = iv_pgmid.
    ls_objkey-&gt;object   = iv_object.
    ls_objkey-&gt;obj_name = iv_obj_name.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="DISPLAY" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="18 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="DISPLAY" SCONAME="IV_BASIC" VERSION="1" LANGU="E" DESCRIPT="Checkbox" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XFELD" PARVALUE="ABAP_FALSE"/>
   <source>method display.

    data lx type ref to cx_salv_error.
    data lo_events type ref to cl_salv_events_table.
    data lo_display type ref to cl_salv_display_settings.
    data lo_functions type ref to cl_salv_functions_list.
    data lo_columns type ref to cl_salv_columns_table.
    data lo_column type ref to cl_salv_column.
    data lo_layout type ref to cl_salv_layout.
    data lo_sort type ref to cl_salv_sorts.

    display_prepare( ).

    show_found( ).

    if v_init = abap_true.

      if go_alv is bound.
        go_alv-&gt;refresh( ).
      endif.

      return.
    endif.
    v_init = abap_true.

    try.

        if iv_basic = abap_true or cl_salv_table=&gt;is_offline( ) = if_salv_c_bool_sap=&gt;true.
          v_basic = abap_true.
        endif.

*----------------------------------------------------------------------*
* Factory
*----------------------------------------------------------------------*

        if v_basic = abap_false.

          create object o_container
            exporting
              repid          = v_repid
              dynnr          = v_dynnr
              container_name = |{ v_container }|.

          cl_salv_table=&gt;factory(
             exporting
               r_container  = o_container
             importing
               r_salv_table = go_alv
             changing
               t_table      = gt_show[] ).

        else.

          cl_salv_table=&gt;factory(
           importing
             r_salv_table = go_alv
           changing
             t_table      = gt_show[] ).

        endif.

*----------------------------------------------------------------------*
* Display
*----------------------------------------------------------------------*

        lo_display = go_alv-&gt;get_display_settings( ).
        if iv_basic = abap_true.
          lo_display-&gt;set_list_header( |{ &apos;ATDT (Beta) : Results&apos;(t02) }| ).
        endif.

*----------------------------------------------------------------------*
* Events
*----------------------------------------------------------------------*

        lo_events = go_alv-&gt;get_event( ).

        set handler me-&gt;on_alv_double_click for lo_events.
        set handler me-&gt;on_alv_main_after_function for lo_events.

*----------------------------------------------------------------------*
* Layout
*----------------------------------------------------------------------*

        lo_layout = go_alv-&gt;get_layout( ).
*
*    lo_layout-&gt;set_key( gs_alv_main_key ).
        lo_layout-&gt;set_save_restriction( if_salv_c_layout=&gt;restrict_none ).
*    lo_layout-&gt;set_default( abap_true ).
*    if gs_options-v_variant is not initial.
*      lo_layout-&gt;set_initial_layout( gs_options-v_variant ).
*    endif.

*----------------------------------------------------------------------*
* Functions
*----------------------------------------------------------------------*

        lo_functions = go_alv-&gt;get_functions( ).
        lo_functions-&gt;set_all( abap_true ).

*        if sy-uname = &apos;BRENDANVVLIE&apos;.
*
*          lo_functions-&gt;add_function(
*             name     = &apos;RERUN&apos;
*             icon     = &apos;@4R@&apos; &quot; ICON_SYSTEM_REDO
*             text     = &apos;&apos;
*             tooltip  = |{ &apos;Deep Dependency Check&apos;(i01) }|
*             position = if_salv_c_function_position=&gt;right_of_salv_functions
*          ).
*
*          lo_functions-&gt;enable_function( name    = &apos;RERUN&apos;
*                                         boolean = abap_true ).
*        endif.

*----------------------------------------------------------------------*
* Columns
*----------------------------------------------------------------------*

        lo_columns = go_alv-&gt;get_columns( ).
        lo_columns-&gt;set_optimize( ).

        lo_column ?= lo_columns-&gt;get_column( columnname = &apos;RCDEV&apos; ).
        lo_column-&gt;set_visible( value  = if_salv_c_bool_sap=&gt;false ).
        lo_column ?= lo_columns-&gt;get_column( columnname = &apos;RCQAS&apos; ).
        lo_column-&gt;set_visible( value  = if_salv_c_bool_sap=&gt;false ).
        lo_column ?= lo_columns-&gt;get_column( columnname = &apos;RCPRD&apos; ).
        lo_column-&gt;set_visible( value  = if_salv_c_bool_sap=&gt;false ).
        lo_column ?= lo_columns-&gt;get_column( columnname = &apos;INDEV&apos; ).
        lo_column-&gt;set_visible( value  = if_salv_c_bool_sap=&gt;false ).
        lo_column ?= lo_columns-&gt;get_column( columnname = &apos;INQAS&apos; ).
        lo_column-&gt;set_visible( value  = if_salv_c_bool_sap=&gt;false ).
        lo_column ?= lo_columns-&gt;get_column( columnname = &apos;INPRD&apos; ).
        lo_column-&gt;set_visible( value  = if_salv_c_bool_sap=&gt;false ).

        lo_column ?= lo_columns-&gt;get_column( columnname = &apos;XDONE&apos; ).
        lo_column-&gt;set_technical( ).
        lo_column ?= lo_columns-&gt;get_column( columnname = &apos;XNORL&apos; ).
        lo_column-&gt;set_technical( ).
        lo_column ?= lo_columns-&gt;get_column( columnname = &apos;XNOVW&apos; ).
        lo_column-&gt;set_technical( ).

        lo_column ?= lo_columns-&gt;get_column( columnname = &apos;ICDEV&apos; ).
        lo_column-&gt;set_short_text(  |{ gs_options-dev }| ).
        lo_column-&gt;set_medium_text( |{ gs_options-dev }| ).
        lo_column-&gt;set_long_text(   |{ gs_options-dev }| ).

        lo_column ?= lo_columns-&gt;get_column( columnname = &apos;ICQAS&apos; ).
        lo_column-&gt;set_short_text(  |{ gs_options-qas }| ).
        lo_column-&gt;set_medium_text( |{ gs_options-qas }| ).
        lo_column-&gt;set_long_text(   |{ gs_options-qas }| ).

        lo_column ?= lo_columns-&gt;get_column( columnname = &apos;ICPRD&apos; ).
        lo_column-&gt;set_short_text(  |{ gs_options-prd }| ).
        lo_column-&gt;set_medium_text( |{ gs_options-prd }| ).
        lo_column-&gt;set_long_text(   |{ gs_options-prd }| ).

        lo_column ?= lo_columns-&gt;get_column( columnname = &apos;LEVEL&apos; ).
        lo_column-&gt;set_short_text(  |Scan Level| ).
*        lo_column-&gt;set_medium_text( |Scan Level| ).
*        lo_column-&gt;set_long_text(   |Scan Level| ).

*
*----------------------------------------------------------------------*
* Sort Order
*----------------------------------------------------------------------*

*        lo_sort = go_alv-&gt;get_sorts( ).
*
*        call method lo_sort-&gt;add_sort
*          exporting
*            columnname = &apos;INDEV&apos;
*            sequence   = if_salv_c_sort=&gt;sort_down.
*        call method lo_sort-&gt;add_sort
*          exporting
*            columnname = &apos;INQAS&apos;
*            sequence   = if_salv_c_sort=&gt;sort_down.
*        call method lo_sort-&gt;add_sort
*          exporting
*            columnname = &apos;INPRD&apos;
*            sequence   = if_salv_c_sort=&gt;sort_down.
*
*        call method lo_sort-&gt;add_sort
*          exporting
*            columnname = &apos;SEQDT&apos;
*            sequence   = if_salv_c_sort=&gt;sort_up.
*
*        call method lo_sort-&gt;add_sort
*          exporting
*            columnname = &apos;SEQTM&apos;
*            sequence   = if_salv_c_sort=&gt;sort_up.
*
*        call method lo_sort-&gt;add_sort
*          exporting
*            columnname = &apos;AS4DATE&apos;
*            sequence   = if_salv_c_sort=&gt;sort_up.
*
*        call method lo_sort-&gt;add_sort
*          exporting
*            columnname = &apos;AS4TIME&apos;
*            sequence   = if_salv_c_sort=&gt;sort_up.
*
*        call method lo_sort-&gt;add_sort
*          exporting
*            columnname = &apos;TRKORR&apos;
*            sequence   = if_salv_c_sort=&gt;sort_up.

*----------------------------------------------------------------------*
* Display
*----------------------------------------------------------------------*

        go_alv-&gt;display( ).

        show_found( ).

*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*

      catch cx_salv_error into lx.
        message lx type &apos;I&apos;.
    endtry.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="DISPLAY_PREPARE" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method display_prepare.

  gt_show[] = gt_status[].
  if gs_options-xignore_done = abap_true.
    delete gt_show[]
      where not (    indev is initial
                  or inqas is initial
                  or inprd is initial ).
  endif.

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="LOG" VERSION="1" LANGU="E" EXPOSURE="0" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method log.

    try.

        call method cl_abap_tstmp=&gt;subtract
          exporting
            tstmp1 = v_tmend
            tstmp2 = v_tmbeg
          receiving
            r_secs = v_tmdur.

        log-point id zatdt subkey |{ sy-uname }.{ v_tmdur }| fields sy-tcode sy-cprog sy-repid sy-uname v_tmbeg v_tmend v_tmdur.

      catch cx_parameter_invalid ##no_handler.

        log-point id zatdt subkey |{ sy-uname }.{ v_tmbeg }| fields sy-tcode sy-cprog sy-repid sy-uname v_tmbeg v_tmend.

    endtry.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="MAKE_BASE" VERSION="1" LANGU="E" DESCRIPT="Create base components" EXPOSURE="0" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" MTDNEWEXC="X" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="MAKE_BASE" SCONAME="IV_REPID" VERSION="1" LANGU="E" DESCRIPT="ABAP Program: Current Main Program" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYREPID" PARVALUE="&apos;SAPLSLVC_FULLSCREEN&apos;"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="MAKE_BASE" SCONAME="IV_DYNNR" VERSION="1" LANGU="E" DESCRIPT="Current Screen Number" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYDYNNR" PARVALUE="&apos;500&apos;"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="MAKE_BASE" SCONAME="IV_CONTAINER" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="STRING" PAROPTIONL="X"/>
   <exception CLSNAME="ZCL_BC_ATDT" CMPNAME="MAKE_BASE" SCONAME="CX_SALV_ERROR" VERSION="1" LANGU="E" DESCRIPT="ALV: General Error Class (Checked During Syntax Check)" MTDTYPE="0" EDITORDER="1 "/>
   <source>method make_base.

    if v_basic = abap_true.
      return.
    endif.

    if iv_container is not initial.
      create object o_container
        exporting
          repid          = iv_repid
          dynnr          = iv_dynnr
          container_name = |{ iv_container }|.
    endif.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="ON_ALV_DOUBLE_CLICK" VERSION="1" LANGU="E" DESCRIPT="Handle Alv Event: Double Click on MAIN" EXPOSURE="1" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="CL_SALV_EVENTS_TABLE" REFCMPNAME="DOUBLE_CLICK" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="ON_ALV_DOUBLE_CLICK" SCONAME="ROW" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="1" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="0"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="ON_ALV_DOUBLE_CLICK" SCONAME="COLUMN" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="1" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="0"/>
   <source>method on_alv_double_click.

    data ls_show type ref to gty_status_s.
    data lt_request_numbers type cts_trkorrs.
    data ls_request_number type ref to cts_trkorr.

    check row is not initial.

    read table gt_show[] reference into ls_show index row.
    assert sy-subrc is initial.

*    call function &apos;TR_DISPLAY_REQUEST&apos;
*      exporting
*        i_trkorr = ls_show-&gt;trkorr.

    append initial line to lt_request_numbers[] reference into ls_request_number.
    ls_request_number-&gt;trkorr = ls_show-&gt;trkorr.

    call function &apos;TR_DISPLAY_REQUESTS&apos;
      exporting
        it_request_numbers = lt_request_numbers[].

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="ON_ALV_MAIN_AFTER_FUNCTION" VERSION="1" LANGU="E" DESCRIPT="Handle Alv Event: After Function on MAIN" EXPOSURE="1" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="1" MTDDECLTYP="0" REFCLSNAME="CL_SALV_EVENTS_TABLE" REFCMPNAME="AFTER_SALV_FUNCTION" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="ON_ALV_MAIN_AFTER_FUNCTION" SCONAME="E_SALV_FUNCTION" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="1" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="0" TYPTYPE="0"/>
   <source>method on_alv_main_after_function.

    case e_salv_function.
      when &apos;RERUN&apos;.
        rerun( ).
      when others.
        return.
    endcase.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="PROCESS_COMPONENTS" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="PROCESS_COMPONENTS" SCONAME="IV_GET_SUBS" VERSION="1" LANGU="E" DESCRIPT="Checkbox" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XFELD" PARVALUE="ABAP_TRUE"/>
   <source>method process_components.

    data ls_tadir type tadir.
    data lv_namespace type namespace.
    data lv_pgmid type pgmid.
    data lt_components type gty_tadir_key_t.
    data ls_objkey type ref to gty_tadir_key_s.

*   get component components
    loop at gt_components[] reference into ls_objkey.

      collect_components(
        exporting
          iv_pgmid    = ls_objkey-&gt;pgmid
          iv_object   = ls_objkey-&gt;object
          iv_obj_name = ls_objkey-&gt;obj_name
        changing
          ct_components = lt_components[]
      ).

    endloop.

    append lines of lt_components[] to gt_components[].
    sort gt_components[].
    delete adjacent duplicates from gt_components[] comparing all fields .

    loop at gt_components[] reference into ls_objkey.

      _get_directory_from_objkey(
        exporting
          iv_encl_obj  = space
        importing
          es_tadir     = ls_tadir
          ev_namespace = lv_namespace
        changing
          cv_pgmid     = ls_objkey-&gt;pgmid
          cv_object    = ls_objkey-&gt;object
          cv_obj_name  = ls_objkey-&gt;obj_name
      ).

      if 0 &lt;&gt; _directory_ok( is_tadir = ls_tadir iv_namespace = lv_namespace ).
        discard_object( iv_pgmid = ls_objkey-&gt;pgmid iv_object = ls_objkey-&gt;object iv_obj_name = ls_objkey-&gt;obj_name ).
        continue.
      endif.

      process_object(
        is_tadir        = ls_tadir
        iv_sub_pgmid    = ls_objkey-&gt;pgmid
        iv_sub_object   = ls_objkey-&gt;object
        iv_sub_obj_name = ls_objkey-&gt;obj_name
        iv_namespace    = lv_namespace
        iv_level        = 3
      ).

    endloop.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="PROCESS_DELETIONS" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="0 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method process_deletions.

  data lr_trkorr type trsel_trt_trkorr .
  data ls_trkorr type ref to trsel_trs_trkorr.
  data lt_entry type standard table of e071.
  data ls_entry type ref to e071.

  &quot; deleted workbench objects no longer have directory entries and would have been discarded

  select
      e071~trkorr e071~as4pos e071~pgmid
      e071~object e071~obj_name e071~objfunc
      e071~lockflag e071~gennum e071~lang e071~activity
    from e071 inner join e070
      on e071~trkorr = e070~trkorr
    into table lt_entry[]
    for all entries in gt_discarded[]
    where e071~pgmid      = gt_discarded-pgmid
      and e071~object     = gt_discarded-object
      and e071~obj_name   = gt_discarded-obj_name
      and e071~objfunc    = &apos;D&apos;
      and e070~trfunction = &apos;K&apos;.
  if sy-subrc is not initial.
    return.
  endif.

  loop at lt_entry[] reference into ls_entry.

    if not 0 = _object_type_ok( iv_pgmid  = ls_entry-&gt;pgmid
                                iv_object = ls_entry-&gt;object ).
      continue.
    endif.

    read table gt_entries[] transporting no fields with key
      trkorr   = ls_entry-&gt;trkorr
      pgmid    = ls_entry-&gt;pgmid
      object   = ls_entry-&gt;object
      obj_name = ls_entry-&gt;obj_name.
    check sy-subrc is not initial. &quot; already processed

    append ls_entry-&gt;* to gt_entries[].

    read table gt_request_primary[] transporting no fields with key
      trkorr = ls_entry-&gt;trkorr.
    if sy-subrc is not initial.
      read table gt_request_secondary[] transporting no fields with key
        trkorr = ls_entry-&gt;trkorr.
      if sy-subrc is not initial.
        append initial line to lr_trkorr[] reference into ls_trkorr.
        ls_trkorr-&gt;sign   = &apos;I&apos;.
        ls_trkorr-&gt;option = &apos;EQ&apos;.
        ls_trkorr-&gt;low = ls_entry-&gt;trkorr.
      endif.
    endif.

  endloop.

  if lr_trkorr[] is not initial.
    sort lr_trkorr[].
    delete adjacent duplicates from lr_trkorr[] comparing all fields.
    append lines of _get_requests( ir_trkorr  = lr_trkorr[] ) to gt_request_secondary[].
  endif.

  sort gt_entries[].

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="PROCESS_ENVIROMENT" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method process_enviroment.

    data lt_env type senvi_tab.
    data ls_env type ref to senvi.
    data ls_tadir type tadir.
    data lv_namespace type namespace.
    data lv_pgmid type pgmid.

    sort gt_objkeys[].
    delete adjacent duplicates from gt_objkeys[] comparing all fields.

    lt_env[] = _get_enviroment_from_objkeys( gt_objkeys[] ).
    if lt_env[] is initial.
      return.
    endif.
    append lines of lt_env[] to gt_env[].

    loop at lt_env[] reference into ls_env.

      _get_directory_from_objkey(
        exporting
          iv_encl_obj  = ls_env-&gt;encl_obj
        importing
          es_tadir     = ls_tadir
          ev_namespace = lv_namespace
        changing
          cv_pgmid     = lv_pgmid
          cv_object    = ls_env-&gt;type
          cv_obj_name  = ls_env-&gt;object
      ).

      collect_components(
        exporting
          iv_pgmid      = lv_pgmid
          iv_object     = ls_env-&gt;type
          iv_obj_name   = ls_env-&gt;object
        changing
          ct_components = gt_components[]
      ).

      if 0 &lt;&gt; _directory_ok( is_tadir = ls_tadir iv_namespace = lv_namespace ).
        discard_object( iv_pgmid = lv_pgmid iv_object = ls_env-&gt;type iv_obj_name = ls_env-&gt;object ).
        continue.
      endif.

      process_object(
        is_tadir        = ls_tadir
        iv_sub_pgmid    = lv_pgmid
        iv_sub_object   = ls_env-&gt;type
        iv_sub_obj_name = ls_env-&gt;object
        iv_namespace    = lv_namespace
        iv_level        = 2
      ).

    endloop.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="PROCESS_LOCKS" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method process_locks.

    data ls_objkey type ref to gty_tadir_key_s.
    data ls_lock type gty_lock_s.
    data lr_trkorr type trsel_trt_trkorr .
    data ls_trkorr type ref to trsel_trs_trkorr.

    sort gt_objkeys[].
    delete adjacent duplicates from gt_objkeys[] comparing all fields.

    loop at gt_objkeys[] reference into ls_objkey.

      read table gt_lock[] transporting no fields with key
        pgmid    = ls_objkey-&gt;pgmid
        object   = ls_objkey-&gt;object
        obj_name = ls_objkey-&gt;obj_name.
      check sy-subrc is not initial. &quot; already processed

      clear ls_lock.
      call function &apos;TR_CHECK_OBJECT_LOCK&apos;
        exporting
          wi_pgmid                   = ls_objkey-&gt;pgmid
          wi_object                  = ls_objkey-&gt;object
          wi_objname                 = ls_objkey-&gt;obj_name
        importing
          we_lockable_object         = ls_lock-lockable_object
          we_locked                  = ls_lock-locked
          we_lock_order              = ls_lock-lock_order
          we_lock_order_user         = ls_lock-lock_order_user
          we_lock_task               = ls_lock-lock_task
          we_lock_task_user          = ls_lock-lock_task_user
          we_object_editable         = ls_lock-object_editable
          we_possible_user_edit_task = ls_lock-possible_user_edit_task
        exceptions
          empty_key                  = 1
          no_systemname              = 2
          no_systemtype              = 3
          unallowed_lock_order       = 4
          others                     = 5.
      if sy-subrc &lt;&gt; 0 or ls_lock-lock_order is initial. &quot;ls_lock-locked is initial.
        continue.
      endif.

      ls_lock-pgmid    = ls_objkey-&gt;pgmid.
      ls_lock-object   = ls_objkey-&gt;object.
      ls_lock-obj_name = ls_objkey-&gt;obj_name.

      append ls_lock to gt_lock[].

      read table gt_request_primary[] transporting no fields with key
        trkorr = ls_lock-lock_order.
      if sy-subrc is not initial.
        read table gt_request_secondary[] transporting no fields with key
          trkorr = ls_lock-lock_order.
        if sy-subrc is not initial.
          append initial line to lr_trkorr[] reference into ls_trkorr.
          ls_trkorr-&gt;sign   = &apos;I&apos;.
          ls_trkorr-&gt;option = &apos;EQ&apos;.
          ls_trkorr-&gt;low = ls_lock-lock_order.
        endif.
      endif.

    endloop.

    if lr_trkorr[] is not initial.
      sort lr_trkorr[].
      delete adjacent duplicates from lr_trkorr[] comparing all fields.
      append lines of _get_requests( ir_trkorr  = lr_trkorr[] ) to gt_request_secondary[].
    endif.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="PROCESS_OBJECT" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="PROCESS_OBJECT" SCONAME="IS_TADIR" VERSION="1" LANGU="E" DESCRIPT="Directory of Repository Objects" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TADIR"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="PROCESS_OBJECT" SCONAME="IV_SUB_PGMID" VERSION="1" LANGU="E" DESCRIPT="Program ID in Requests and Tasks" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="PROCESS_OBJECT" SCONAME="IV_SUB_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="PROCESS_OBJECT" SCONAME="IV_SUB_OBJ_NAME" VERSION="1" LANGU="E" DESCRIPT="Object Name in Object List" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="PROCESS_OBJECT" SCONAME="IV_NAMESPACE" VERSION="1" LANGU="E" DESCRIPT="Namespace" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="NAMESPACE"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="PROCESS_OBJECT" SCONAME="IV_LEVEL" VERSION="1" LANGU="E" DESCRIPT="Two digit number" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="NUMC2"/>
   <source>method process_object.

    data ls_objkey type ref to gty_tadir_key_s.
    data lv_sub_pgmid	 type pgmid.
    data lv_sub_object type trobjtype.
    data lv_sub_obj_name type trobj_name.

    lv_sub_pgmid    = iv_sub_pgmid.
    lv_sub_object   = iv_sub_object.
    lv_sub_obj_name = iv_sub_obj_name.

* check if already processed
    read table gt_objkeys[] transporting no fields with key
      pgmid    = lv_sub_pgmid
      object   = lv_sub_object
      obj_name = lv_sub_obj_name.
    if sy-subrc is initial.
      return.
    endif.

* add object
    read table gt_objkeys[] transporting no fields with key
      pgmid    = is_tadir-pgmid
      object   = is_tadir-object
      obj_name = is_tadir-obj_name.
    if sy-subrc is not initial.
      append initial line to gt_objkeys[] reference into ls_objkey.
      move-corresponding is_tadir to ls_objkey-&gt;*.
      ls_objkey-&gt;level = iv_level.
    endif.

* add sub object
    if is_tadir-pgmid    &lt;&gt; lv_sub_pgmid
    or is_tadir-object   &lt;&gt; lv_sub_object
    or is_tadir-obj_name &lt;&gt; lv_sub_obj_name.
      append initial line to gt_objkeys[] reference into ls_objkey.
      ls_objkey-&gt;pgmid    = lv_sub_pgmid.
      ls_objkey-&gt;object   = lv_sub_object.
      ls_objkey-&gt;obj_name = lv_sub_obj_name.
      ls_objkey-&gt;level = iv_level.
    endif.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="PROCESS_REQUEST" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="PROCESS_REQUEST" SCONAME="IV_TRKORR" VERSION="1" LANGU="E" DESCRIPT="Request/Task" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TRKORR"/>
   <source>method process_request.

    data lt_entries type tr_objects.
    data ls_entry type ref to e071.
    data ls_tadir type tadir.
    data lv_namespace type namespace.

* get transport request entries
    lt_entries[] = _get_entries_from_request( iv_trkorr ).
    if lt_entries[] is initial.
      return.
    endif.
    append lines of lt_entries[] to gt_entries[].

* get directory of entries
    loop at lt_entries[] reference into ls_entry.

      shift ls_entry-&gt;obj_name left deleting leading space.

      _get_directory_from_objkey(
        exporting
          iv_encl_obj  = space
        importing
          es_tadir     = ls_tadir
          ev_namespace = lv_namespace
        changing
          cv_pgmid     = ls_entry-&gt;pgmid
          cv_object    = ls_entry-&gt;object
          cv_obj_name  = ls_entry-&gt;obj_name
      ).

      collect_components(
        exporting
          iv_pgmid      = ls_entry-&gt;pgmid
          iv_object     = ls_entry-&gt;object
          iv_obj_name   = ls_entry-&gt;obj_name
        changing
          ct_components = gt_components[]
      ).

      if 0 &lt;&gt; _directory_ok( is_tadir = ls_tadir iv_namespace = lv_namespace ).
        discard_object( iv_pgmid = ls_entry-&gt;pgmid iv_object = ls_entry-&gt;object iv_obj_name = ls_entry-&gt;obj_name ).
        continue.
      endif.

      process_object(
        is_tadir        = ls_tadir
        iv_sub_pgmid    = ls_entry-&gt;pgmid
        iv_sub_object   = ls_entry-&gt;object
        iv_sub_obj_name = ls_entry-&gt;obj_name
        iv_namespace    = lv_namespace
        iv_level        = 1
      ).

    endloop.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="PROCESS_REQUESTS" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="PROCESS_REQUESTS" SCONAME="IT_REQUEST" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TRWBO_REQUEST_HEADERS"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="PROCESS_REQUESTS" SCONAME="IV_XENTRY" VERSION="1" LANGU="E" DESCRIPT="Checkbox" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XFELD" PARVALUE="ABAP_FALSE"/>
   <source>method process_requests.

    data ls_request type ref to trwbo_request_header.

    add 1 to v_level.

    loop at it_request[] reference into ls_request.

      set_status(
        exporting
          is_request        = ls_request-&gt;*
        exceptions
          already_processed = 1
          finished          = 2
          others            = 3
      ).
      if sy-subrc &lt;&gt; 0 or iv_xentry &lt;&gt; abap_true.
        continue.
      endif.

      process_request( ls_request-&gt;trkorr ).

    endloop.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="PROCESS_STATUS" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method process_status.

    data ls_status type ref to gty_status_s.

    sort gt_status[] by seqdt seqtm.

    loop at gt_status[] reference into ls_status.

      if gs_options-dev is not initial.
        _set_status_icon(
          exporting
            iv_rc   = ls_status-&gt;rcdev
          changing
            cv_icon = ls_status-&gt;icdev
        ).
      endif.

      if gs_options-qas is not initial.
        _set_status_icon(
          exporting
            iv_rc   = ls_status-&gt;rcqas
          changing
            cv_icon = ls_status-&gt;icqas
        ).
      endif.

      if gs_options-prd is not initial.
        _set_status_icon(
          exporting
            iv_rc   = ls_status-&gt;rcprd
          changing
            cv_icon = ls_status-&gt;icprd
        ).
      endif.

    endloop.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="PROCESS_VERSIONS" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method process_versions.

    data ls_objkey type ref to gty_tadir_key_s.
    data lr_trkorr type trsel_trt_trkorr .
    data ls_trkorr type ref to trsel_trs_trkorr.
    data ls_version type ref to vrsd.
    data lv_strkorr type strkorr.

    sort gt_objkeys[].
    delete adjacent duplicates from gt_objkeys[] comparing all fields.

    loop at gt_objkeys[] reference into ls_objkey.

      read table gt_version[] transporting no fields with key
        objtype = ls_objkey-&gt;object
        objname = ls_objkey-&gt;obj_name.                      &quot;#EC WARNOK
      check sy-subrc is not initial.

      if ls_objkey-&gt;object &lt;&gt; &apos;CLAS&apos;.

        append lines of _get_versions_from_object( iv_objname = ls_objkey-&gt;obj_name iv_objtype = ls_objkey-&gt;object )
          to gt_version[].

      else.

        append lines of _get_versions_from_object( iv_objname = ls_objkey-&gt;obj_name iv_objtype = &apos;CLSD&apos; )
          to gt_version[].

        append lines of _get_versions_from_object( iv_objname = ls_objkey-&gt;obj_name iv_objtype = &apos;CPRI&apos; )
          to gt_version[].

        append lines of _get_versions_from_object( iv_objname = ls_objkey-&gt;obj_name iv_objtype = &apos;CPRO&apos; )
          to gt_version[].

        append lines of _get_versions_from_object( iv_objname = ls_objkey-&gt;obj_name iv_objtype = &apos;CPUB&apos; )
          to gt_version[].

      endif.

    endloop.

    loop at gt_version[] reference into ls_version
      where korrnum is not initial.

      check ls_version-&gt;korrnum &lt;&gt; &apos;LOCAL&apos;.

      read table gt_request_primary[] transporting no fields with key
        trkorr = ls_version-&gt;korrnum.
      if sy-subrc is initial.
        continue. &quot; request already processed
      endif.

      select single strkorr into lv_strkorr from e070
        where trkorr = ls_version-&gt;korrnum.
      assert sy-subrc is initial.
      if lv_strkorr is not initial.
        read table gt_request_primary[] transporting no fields with key
          trkorr = lv_strkorr.
        if sy-subrc is initial.
          continue. &quot; higher-level request already processed
        endif.
      endif.

      append initial line to lr_trkorr[] reference into ls_trkorr.
      ls_trkorr-&gt;sign   = &apos;I&apos;.
      ls_trkorr-&gt;option = &apos;EQ&apos;.
      if lv_strkorr is not initial.
        ls_trkorr-&gt;low = lv_strkorr.
      else.
        ls_trkorr-&gt;low = ls_version-&gt;korrnum.
      endif.

    endloop.

    if lr_trkorr[] is not initial.
      sort lr_trkorr[].
      delete adjacent duplicates from lr_trkorr[] comparing all fields.
      append lines of _get_requests( ir_trkorr  = lr_trkorr[] ) to gt_request_secondary[].
    endif.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="RERUN" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method rerun.

  data lr_trkorr type trsel_trt_trkorr .
  data ls_trkorr type ref to trsel_trs_trkorr.
  data ls_status type ref to gty_status_s.

  loop at gt_status[] reference into ls_status.
    append initial line to lr_trkorr[] reference into ls_trkorr.
    ls_trkorr-&gt;sign   = &apos;I&apos;.
    ls_trkorr-&gt;option = &apos;EQ&apos;.
    ls_trkorr-&gt;low = ls_status-&gt;trkorr.
  endloop.
  if sy-subrc is not initial.
    return.
  endif.

  clear gt_status[].

  run( ir_trkorr = lr_trkorr[] iv_xdeep = abap_undefined ).

*  display_prepare( ).
*
*  if go_alv is bound.
*    go_alv-&gt;refresh( ).
*  endif.
*
*  show_found( ).

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="RUN" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="19 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="RUN" SCONAME="IR_TRKORR" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TRSEL_TRT_TRKORR" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="RUN" SCONAME="IV_XDEEP" VERSION="1" LANGU="E" DESCRIPT="Checkbox" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="XFELD" PARVALUE="ABAP_FALSE"/>
   <source>method run.

    data lv_progress type string.

    get time stamp field v_tmbeg.

    if iv_xdeep = abap_undefined.
      lv_progress = &apos;Deep Scan...&apos;.
    else.
      lv_progress = &apos;Scanning...&apos;.
    endif.

    if ir_trkorr[] is not initial.
      gt_request_primary[] =  _get_requests( ir_trkorr = ir_trkorr[] ).
    else.
      gt_request_primary[] =  _get_requests( ).
    endif.

    _progress_text( iv_percentage = 15 iv_text = lv_progress ). &quot; |Process Primary Requests...| ).

    process_requests(
      it_request = gt_request_primary[]
      iv_xentry  = abap_true
    ).

    _progress_text( iv_percentage = 25 iv_text = lv_progress ). &quot; |Process Enviroment...| ).

    process_enviroment( ).

    _progress_text( iv_percentage = 45 iv_text = lv_progress ). &quot; |Process Components...| ).

    process_components( ).

    _progress_text( iv_percentage = 55 iv_text = lv_progress ). &quot; |Process Versions...| ).

    process_versions( ).

    _progress_text( iv_percentage = 65 iv_text = lv_progress ). &quot; |Process Locks...| ).

    process_locks( ).

    _progress_text( iv_percentage = 75 iv_text = lv_progress ). &quot; |Process Deletions...| ).

    process_deletions( ).

    _progress_text( iv_percentage = 85 iv_text = lv_progress ). &quot; |Process Secondary Requests...| ).

    process_requests(
      it_request = gt_request_secondary[]
      iv_xentry  = abap_true
    ).

    _progress_text( iv_percentage = 95 iv_text = lv_progress ). &quot; |Process Status...| ).

    process_status( ).

    if iv_xdeep = abap_true.
      rerun( ).
    endif.

    sort gt_status[] by
      indev   descending
      inqas   descending
      inprd   descending
      seqdt   ascending
      seqtm   ascending
      as4date ascending
      as4time ascending
      trkorr  ascending.

    get time stamp field v_tmend.

    log( ).

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="SET_STATUS" VERSION="1" LANGU="E" EXPOSURE="1" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="SET_STATUS" SCONAME="IS_REQUEST" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TRWBO_REQUEST_HEADER"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="SET_STATUS" SCONAME="RV_SUBRC" VERSION="1" LANGU="E" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SYSUBRC"/>
   <exception CLSNAME="ZCL_BC_ATDT" CMPNAME="SET_STATUS" SCONAME="ALREADY_PROCESSED" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_BC_ATDT" CMPNAME="SET_STATUS" SCONAME="FINISHED" VERSION="1" LANGU="E" MTDTYPE="0" EDITORDER="2 "/>
   <source>method set_status.

    data ls_status type ref to gty_status_s.
    data ls_log type gty_log_s.
    data ls_view type ref to scts_log_overview.
    data ls_level type gty_level_s.
    data lv_indx type sytabix.

    &quot; ToDo - indev/qas/prd ind not set when a system is not provided and transport has no logs
    &quot;      - set in* indicator independently

* check if already processed
    read table gt_status[] reference into ls_status
      with key trkorr = is_request-trkorr.
    if sy-subrc is initial.
      raise already_processed.
    endif.

* read request logs
    ls_log = _get_views_for_request( is_request-trkorr ) .
    append ls_log to gt_log[].

* create status record
    append initial line to gt_status[] reference into ls_status.
    ls_status-&gt;trkorr  = is_request-trkorr.
    ls_status-&gt;as4user = is_request-as4user.
    ls_status-&gt;as4text = is_request-as4text.
    ls_status-&gt;as4date = is_request-as4date.
    ls_status-&gt;as4time = is_request-as4time.

*   set level
    read table gt_level[] into ls_level with key trkorr = is_request-trkorr binary search.
    if not sy-subrc is initial.
      ls_level-trkorr = is_request-trkorr.
      ls_level-level  = v_level.
      insert ls_level into gt_level[] index sy-tabix.
    endif.
    ls_status-&gt;level = ls_level-level.

* check if not released
    if is_request-trstatus ca c_notrel.
      ls_status-&gt;xnorl = abap_true.
      ls_status-&gt;xnovw = abap_true.
      ls_status-&gt;seqdt = is_request-as4date.
      ls_status-&gt;seqtm = is_request-as4time.
      return.
    endif.

* find views
    if ls_log-views[] is initial.
      ls_status-&gt;xnovw = abap_true.
      ls_status-&gt;seqdt = is_request-as4date.
      ls_status-&gt;seqtm = is_request-as4time.
      return.
    endif.

* read production
    if gs_options-prd is not initial.
      read table ls_log-views[] reference into ls_view with key
        sysnam = gs_options-prd.
      if sy-subrc is initial.
        ls_status-&gt;rcprd = ls_view-&gt;rc.
        if ls_view-&gt;rc &lt;&gt; &apos;W&apos; and ls_view-&gt;rc &lt;&gt; &apos;8&apos;.
          ls_status-&gt;xdone = abap_true.
          ls_status-&gt;inprd = abap_true.
          ls_status-&gt;seqdt = ls_view-&gt;moddate.
          ls_status-&gt;seqtm = ls_view-&gt;modtime.
        endif.
      else.
        ls_status-&gt;rcprd = 99.
        ls_status-&gt;xdone = abap_true.
      endif.
    else.
      ls_status-&gt;inprd = abap_true.
    endif.

* read quality
    if gs_options-qas is not initial.
      read table ls_log-views[] reference into ls_view with key
        sysnam = gs_options-qas.
      if sy-subrc is initial.
        ls_status-&gt;rcqas = ls_view-&gt;rc.
        if ls_view-&gt;rc &lt;&gt; &apos;W&apos; and ls_view-&gt;rc &lt;&gt; &apos;8&apos;.
          ls_status-&gt;inqas = abap_true.
          if ls_status-&gt;seqdt is initial.
            ls_status-&gt;seqdt = ls_view-&gt;moddate.
            ls_status-&gt;seqtm = ls_view-&gt;modtime.
          endif.
        endif.
      else.
        ls_status-&gt;rcprd = 99.
        ls_status-&gt;xdone = abap_true.
      endif.
    else.
      ls_status-&gt;inqas = abap_true.
    endif.

* read development
    if gs_options-dev is not initial.
      read table ls_log-views[] reference into ls_view with key
        sysnam = gs_options-dev.
      if sy-subrc is initial.
        ls_status-&gt;rcdev = ls_view-&gt;rc.
        if ls_view-&gt;rc &lt;&gt; &apos;W&apos; and ls_view-&gt;rc &lt;&gt; &apos;8&apos;.
          ls_status-&gt;indev = abap_true.
          if ls_status-&gt;seqdt is initial.
            ls_status-&gt;seqdt = ls_view-&gt;moddate.
            ls_status-&gt;seqtm = ls_view-&gt;modtime.
          endif.
        endif.
      else.
        ls_status-&gt;rcprd = 99.
        ls_status-&gt;xdone = abap_true.
      endif.
    else.
      ls_status-&gt;indev = abap_true.
    endif.

* fall back to last update
    if ls_status-&gt;seqdt is initial.
      ls_status-&gt;seqdt = is_request-as4date.
      ls_status-&gt;seqtm = is_request-as4time.
    endif.

    if ls_status-&gt;xdone = abap_true.
      raise finished.
    endif.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="SHOW_FOUND" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="0" BCMTDCAT="00" BCMTDSYN="0">
   <source>method show_found.

  data lv_found type i.

  lv_found = lines( gt_show[] ).
  message s368(00) with lv_found &apos;Found&apos; .

endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="_CONV_WB_TO_CTS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_CONV_WB_TO_CTS" SCONAME="IV_WB_TYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_CONV_WB_TO_CTS" SCONAME="IV_WB_OBJECT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_CONV_WB_TO_CTS" SCONAME="IV_WB_ENCL_OBJ" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_CONV_WB_TO_CTS" SCONAME="EV_CTS_TYPE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_CONV_WB_TO_CTS" SCONAME="EV_CTS_NAME" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_CONV_WB_TO_CTS" SCONAME="EV_CTS_PGMID" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <source>method _conv_wb_to_cts.

    &quot; Based on ZCL_TRDA_TOOLS=&gt;CONV_WB_TO_CTS( )

    data lo_wb_object type ref to cl_wb_object.
    data lv_wb_type type seu_obj.
    data lv_wb_object type eu_lname.
    data lv_wb_encl_obj type rseuap-encl_obj.
    data lv_cts_type  type trobjtype.
    data lv_cts_name  type trobj_name.
    data lv_cts_pgmid type pgmid.

    ev_cts_type  = lv_wb_type     = iv_wb_type.
    ev_cts_name  = lv_wb_object   = iv_wb_object.
    ev_cts_pgmid = lv_wb_encl_obj = iv_wb_encl_obj.

    if lv_wb_type = &apos;STRU&apos;.
      lv_wb_type = &apos;TABL&apos;.
    endif.

    call method cl_wb_object=&gt;create_from_toolaccess_key
      exporting
        p_object_type           = lv_wb_type
        p_object_name           = lv_wb_object
        p_enclosing_object      = lv_wb_encl_obj
      receiving
        p_wb_object             = lo_wb_object
      exceptions
        objecttype_not_existing = 1
        empty_object_key        = 2
        others                  = 3.
    if sy-subrc &lt;&gt; 0.
      return.
    endif.

    call method lo_wb_object-&gt;get_transport_key
      importing
        p_obj_name        = lv_cts_name
        p_object          = lv_cts_type
        p_pgmid           = lv_cts_pgmid
      exceptions
        key_not_available = 1.
    if sy-subrc &lt;&gt; 0.
      return.
    endif.

    ev_cts_type  = lv_cts_type.
    ev_cts_name  = lv_cts_name.
    ev_cts_pgmid = lv_cts_pgmid.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="_DIRECTORY_OK" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_DIRECTORY_OK" SCONAME="IS_TADIR" VERSION="1" LANGU="E" DESCRIPT="Directory of Repository Objects" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TADIR"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_DIRECTORY_OK" SCONAME="IV_NAMESPACE" VERSION="1" LANGU="E" DESCRIPT="Namespace" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="NAMESPACE"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_DIRECTORY_OK" SCONAME="RV_SUBRC" VERSION="1" LANGU="E" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SYSUBRC"/>
   <source>method _directory_ok.

    data lv_unam type trdir-unam.

    rv_subrc = 4. &quot; not

    if is_tadir is initial.
      return.
    endif.

    if is_tadir-author cs &apos;SAP&apos;.
      if is_tadir-object = &apos;PROG&apos;
      or is_tadir-object = &apos;REPS&apos;.
        select single unam into lv_unam from trdir
          where name = is_tadir-obj_name.
        if sy-subrc is not initial or lv_unam = &apos;SAP&apos;.
          return.
        endif.
      else.
        return.
      endif.
    endif.

    if iv_namespace &lt;&gt; &apos;/0CUST/&apos; or is_tadir-author cs &apos;SAP&apos;.

      if is_tadir-object = &apos;PROG&apos;
      or is_tadir-object = &apos;REPS&apos;.

        select single unam into lv_unam from trdir
          where name = is_tadir-obj_name.
        if lv_unam cs &apos;SAP&apos;.
          return.
        endif.

      else.
        return.
      endif.

    endif.

    rv_subrc = 0. &quot; pass

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_DIRECTORY_FROM_ENTRY" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="7 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_DIRECTORY_FROM_ENTRY" SCONAME="IS_ENTRY" VERSION="1" LANGU="E" DESCRIPT="Change &amp; Transport System: Object Entries of Requests/Tasks" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="E071"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_DIRECTORY_FROM_ENTRY" SCONAME="ES_TADIR" VERSION="1" LANGU="E" DESCRIPT="Directory of Repository Objects" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TADIR"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_DIRECTORY_FROM_ENTRY" SCONAME="EV_NAMESPACE" VERSION="1" LANGU="E" DESCRIPT="Namespace" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="NAMESPACE"/>
   <source>method _get_directory_from_entry.

    data ls_tadir type tadir.

    clear:
      es_tadir,
      ev_namespace.

    call function &apos;TR_CHECK_TYPE&apos;
      exporting
        wi_e071      = is_entry
      importing
        we_tadir     = ls_tadir
        ev_namespace = ev_namespace.

    if ls_tadir is initial.
      return.
    endif.

    select single * from tadir into es_tadir
      where pgmid    = ls_tadir-pgmid
        and object   = ls_tadir-object
        and obj_name = ls_tadir-obj_name.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_DIRECTORY_FROM_OBJKEY" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="8 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_DIRECTORY_FROM_OBJKEY" SCONAME="IV_ENCL_OBJ" VERSION="1" LANGU="E" DESCRIPT="Object Name in Object Directory" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_DIRECTORY_FROM_OBJKEY" SCONAME="ES_TADIR" VERSION="1" LANGU="E" DESCRIPT="Directory of Repository Objects" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TADIR"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_DIRECTORY_FROM_OBJKEY" SCONAME="EV_NAMESPACE" VERSION="1" LANGU="E" DESCRIPT="Namespace" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="NAMESPACE"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_DIRECTORY_FROM_OBJKEY" SCONAME="CV_PGMID" VERSION="1" LANGU="E" DESCRIPT="Program ID in Requests and Tasks" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_DIRECTORY_FROM_OBJKEY" SCONAME="CV_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="5 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_DIRECTORY_FROM_OBJKEY" SCONAME="CV_OBJ_NAME" VERSION="1" LANGU="E" DESCRIPT="Object Name in Object List" CMPTYPE="1" MTDTYPE="0" EDITORDER="6 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <source>method _get_directory_from_objkey.

    data ls_entry type e071.
    data lv_tm type timestampl.

    clear:
      es_tadir,
      ev_namespace.

    if not 0 = _object_type_ok( iv_pgmid  = cv_pgmid
                                iv_object = cv_object ).
      return.
    endif.

    _conv_wb_to_cts(
      exporting
        iv_wb_type     = cv_object
        iv_wb_object   = cv_obj_name
        iv_wb_encl_obj = iv_encl_obj
      importing
        ev_cts_type    = ls_entry-object
        ev_cts_name    = ls_entry-obj_name
        ev_cts_pgmid   = ls_entry-pgmid
    ).

    shift ls_entry-obj_name left deleting leading space.

    if ls_entry-object is initial.
      get time stamp field lv_tm.
      log-point id zatdt subkey |error.{ sy-uname }.{ lv_tm }| fields sy-tcode sy-cprog sy-repid sy-uname lv_tm cv_object cv_obj_name iv_encl_obj.
      return.
    endif.

    assert ls_entry-obj_name is not initial.

    cv_pgmid    = ls_entry-pgmid.
    cv_object   = ls_entry-object.
    cv_obj_name = ls_entry-obj_name.

    _get_directory_from_entry(
      exporting
        is_entry     = ls_entry
      importing
        es_tadir     = es_tadir
        ev_namespace = ev_namespace
    ).

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_ENTRIES_FROM_REQUEST" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="9 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_ENTRIES_FROM_REQUEST" SCONAME="IV_REQUEST" VERSION="1" LANGU="E" DESCRIPT="Request/Task" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TRKORR"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_ENTRIES_FROM_REQUEST" SCONAME="RT_OBJECTS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TR_OBJECTS"/>
   <source>method _get_entries_from_request.

    data ls_request_header type trwbo_request_header.

    ls_request_header-trkorr = iv_request.
    call function &apos;TR_GET_OBJECTS_OF_REQ_AN_TASKS&apos;
      exporting
        is_request_header      = ls_request_header
        iv_condense_objectlist = abap_true
      importing
        et_objects             = rt_objects[]
*       et_keys                = et_keys
*       et_keys_str            = et_keys_str
      exceptions
        others                 = 0.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_ENVIROMENT_FROM_OBJKEY" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="10 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_ENVIROMENT_FROM_OBJKEY" SCONAME="IS_OBJKEYS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="GTY_TADIR_KEY_S"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_ENVIROMENT_FROM_OBJKEY" SCONAME="RT_ENV" VERSION="1" LANGU="E" DESCRIPT="Repository Info System: Get Environment Results Table" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SENVI_TAB"/>
   <source>method _get_enviroment_from_objkey.

    field-symbols &lt;lv&gt; type xfeld.

    data lv_objty type euobj-id.
    data lv_objnm type tadir-obj_name.
    data ls_environment_types type envi_types.

    lv_objty = is_objkeys-object.
    lv_objnm = is_objkeys-obj_name.

    do.
      assign component sy-index of structure ls_environment_types to &lt;lv&gt;.
      if sy-subrc is not initial. exit. endif.
      &lt;lv&gt; = abap_true.
    enddo.

    call function &apos;REPOSITORY_ENVIRONMENT_RFC&apos;
      exporting
        obj_type          = lv_objty
        environment_types = ls_environment_types
        object_name       = lv_objnm
      tables
        environment_tab   = rt_env[].

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_ENVIROMENT_FROM_OBJKEYS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="11 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_ENVIROMENT_FROM_OBJKEYS" SCONAME="IT_OBJKEYS" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="GTY_TADIR_KEY_T"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_ENVIROMENT_FROM_OBJKEYS" SCONAME="RT_ENV" VERSION="1" LANGU="E" DESCRIPT="Repository Info System: Get Environment Results Table" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SENVI_TAB"/>
   <source>method _get_enviroment_from_objkeys.

    data ls_objkeys type ref to gty_tadir_key_s.

    loop at it_objkeys[] reference into ls_objkeys.

      append lines of _get_enviroment_from_objkey( ls_objkeys-&gt;* ) to rt_env[].

    endloop.

    sort rt_env[].
    delete adjacent duplicates from rt_env[] comparing all fields.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_REQUESTS" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="12 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_REQUESTS" SCONAME="IV_UNAME" VERSION="1" LANGU="E" DESCRIPT="User Name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="SYUNAME" PARVALUE="SY-UNAME"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_REQUESTS" SCONAME="IR_TRKORR" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TRSEL_TRT_TRKORR" PAROPTIONL="X"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_REQUESTS" SCONAME="RT_REQUEST" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TRWBO_REQUEST_HEADERS"/>
   <source>method _get_requests.

    data lv_title type sytitle.
    data ls_selection type trwbo_selection.
    data ls_ranges type trsel_ts_ranges.
    data lv_via_selscreen type xfeld value abap_true.
    data lv_uname type syuname.

    lv_title = &apos;ATDT (Beta) : Transport Request Selection&apos;(t01) .

    ls_selection-reqfunctions  = c_trco.
    ls_selection-reqstatus     = c_allstat.

    lv_uname = iv_uname.

    if ir_trkorr[] is not initial.
      lv_via_selscreen = abap_false.
      ls_ranges-trkorr[] = ir_trkorr[].
      clear lv_uname.
    else.
      lv_uname = iv_uname.
    endif.

    call function &apos;TRINT_SELECT_REQUESTS&apos;
      exporting
        iv_username_pattern  = lv_uname
        is_selection         = ls_selection
        iv_complete_projects = abap_false
        iv_via_selscreen     = lv_via_selscreen
        iv_title             = lv_title
      importing
        et_requests          = rt_request[]
      changing
        cs_ranges            = ls_ranges
      exceptions
        others               = 0.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_VERSIONS_FROM_OBJECT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="13 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_VERSIONS_FROM_OBJECT" SCONAME="IV_OBJNAME" VERSION="1" LANGU="E" DESCRIPT="Version management: Object name" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_VERSIONS_FROM_OBJECT" SCONAME="IV_OBJTYPE" VERSION="1" LANGU="E" DESCRIPT="Version Management: Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_VERSIONS_FROM_OBJECT" SCONAME="ET_VERSION" VERSION="1" LANGU="E" DESCRIPT="Table of Type VRSD" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="VRSD_TAB"/>
   <source>method _get_versions_from_object.

    data lv_objname	type vrsd-objname.
    data lv_objtype	type vrsd-objtype.
    data lt_lver type standard table of vrsn.

    lv_objname = iv_objname.
    lv_objtype = iv_objtype.

    call function &apos;SVRS_GET_VERSION_DIRECTORY_46&apos;
      exporting
        objname                = lv_objname
        objtype                = lv_objtype
      tables
        lversno_list           = lt_lver[]
        version_list           = et_version[]
      exceptions
        no_entry               = 1
        communication_failure_ = 2
        system_failure         = 3
        others                 = 4.
    if sy-subrc &lt;&gt; 0.
      return.
    endif.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_VIEWS_FOR_REQUEST" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="14 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_VIEWS_FOR_REQUEST" SCONAME="IV_TRKORR" VERSION="1" LANGU="E" DESCRIPT="Request/Task" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TRKORR"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_GET_VIEWS_FOR_REQUEST" SCONAME="RS_TRLOG" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="GTY_LOG_S"/>
   <source>method _get_views_for_request.

    rs_trlog-trkorr = iv_trkorr.

    call function &apos;TRINT_GET_LOG_OVERVIEW&apos;
      exporting
        iv_request                = rs_trlog-trkorr
        iv_with_transport_targets = &apos;X&apos;
      importing
        et_log_overview           = rs_trlog-views[].

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="_OBJECT_TYPE_OK" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_OBJECT_TYPE_OK" SCONAME="IV_PGMID" VERSION="1" LANGU="E" DESCRIPT="Program ID in Requests and Tasks" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_OBJECT_TYPE_OK" SCONAME="IV_OBJECT" VERSION="1" LANGU="E" DESCRIPT="Object Type" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_OBJECT_TYPE_OK" SCONAME="RV_SUBRC" VERSION="1" LANGU="E" DESCRIPT="Return Value of ABAP Statements" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="SYSUBRC"/>
   <source>method _object_type_ok.

    data lv_pgmid	type pgmid.
    data lv_object type trobjtype.

    lv_pgmid  = iv_pgmid.
    lv_object = iv_object.

    rv_subrc = 4. &quot; not

    if strlen( lv_pgmid ) &lt;&gt; 4 and strlen( lv_pgmid ) &lt;&gt; 0.
      return.
    endif.

    if lv_pgmid  = &apos;CORR&apos;.
      return.
    endif.

    if lv_object = &apos;TABU&apos;
    or lv_object = &apos;TDAT&apos;
    or lv_object = &apos;CDAT&apos;
    or lv_object = &apos;MERG&apos;
    or lv_object = &apos;RELE&apos;
    or lv_object = &apos;CORR&apos;
    or lv_object = &apos;DMEE&apos;
    or lv_object = &apos;TOBJ&apos;.
*  or lv_object = &apos;SHI6&apos;.
      return.
    endif.

    rv_subrc = 0. &quot; pass

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="_PROGRESS_TEXT" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="15 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_PROGRESS_TEXT" SCONAME="IV_TEXT" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_PROGRESS_TEXT" SCONAME="IV_PERCENTAGE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY" PARVALUE="0"/>
   <source>method _progress_text.

    data lv_text type string.

    lv_text = iv_text.

    call function &apos;SAPGUI_PROGRESS_INDICATOR&apos;
      exporting
        percentage = iv_percentage
        text       = lv_text.

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="_RUN" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="16 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <source>method _run.

    data lo type ref to zcl_bc_atdt.
*  data lv_dev          type mandt.
*  data lv_qas          type mandt.
*  data lv_prd          type mandt.
*  data lv_xignore_done type xfeld.

    create object lo.
*    exporting
*      iv_dev          = &apos;GTD&apos;
*      iv_qas          = &apos;GTQ&apos;
*      iv_prd          = &apos;GTP&apos;
*      iv_xignore_done = abap_true.

    lo-&gt;run( ).

    lo-&gt;display( iv_basic = abap_true ).

  endmethod.</source>
  </method>
  <method CLSNAME="ZCL_BC_ATDT" CMPNAME="_SET_STATUS_ICON" VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_SET_STATUS_ICON" SCONAME="IV_RC" VERSION="1" LANGU="E" DESCRIPT="Return code" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TRRETCODE"/>
   <parameter CLSNAME="ZCL_BC_ATDT" CMPNAME="_SET_STATUS_ICON" SCONAME="CV_ICON" VERSION="1" LANGU="E" DESCRIPT="Icon in text fields (substitute display, alias)" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="ICON_D"/>
   <source>method _set_status_icon.

    data lv_rc type trretcode.

    lv_rc = iv_rc.
    condense lv_rc no-gaps.

    case lv_rc .
      when &apos;W&apos; or space.
        cv_icon = icon_time. &quot; icon_led_red.        &quot; icon_transport &quot; icon_import
      when &apos;0&apos; or &apos;D&apos;.
        cv_icon = icon_led_green.      &quot; icon_action_success
      when &apos;4&apos;.
        cv_icon = icon_led_yellow.
      when &apos;8&apos;.
        cv_icon = icon_action_fault.   &quot; icon_message_error_small
      when &apos;99&apos;.
        cv_icon = icon_led_inactive.
      when others.
        cv_icon = icon_question.
    endcase.

  endmethod.</source>
  </method>
 </CLAS>
</nugget>
